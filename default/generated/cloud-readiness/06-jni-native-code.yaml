- category: mandatory
  customVariables: []
  description: Java native libraries (JNI, JNA)
  effort: 7
  labels:
  - konveyor.io/target=cloud-readiness
  - konveyor.io/source
  - domain=cloud-native
  - category=java-native-code
  - source-category=jni-native-code
  - jni
  links: 
  - title: Advanced example for containers
    url: https://docs.microsoft.com/en-us/visualstudio/install/advanced-build-tools-container?view=vs-2019
  - title: how to register com components inside docker as regsvr32 command
    url: https://stackoverflow.com/questions/54502335/how-to-register-com-components-inside-docker-as-regsvr32-command-executes-succes
  - title: How to containerize the .NET Framework web apps with Windows Containers and Docker
    url: https://github.com/dotnet-architecture/eShopModernizing/wiki/02.-How-to-containerize-the-.NET-Framework-web-apps-with-Windows-Containers-and-Docker
  - title: Windows Application 32 bit COM dll registration
    url: https://forums.docker.com/t/windows-application-32-bit-com-dll-registration/47205/8
  message: |-
    When migrating an application that uses Java native libraries (JNI, JNA) to Azure, it's important to consider that Java native libraries might not run in a cloud or container environment.
     Instead, you can refactor your application to use cloud-compatible alternatives or managed services.

     * **Identify native library dependencies**: Review all native libraries used in your application and review the purpose of each library.

     * **Evaluate and use cloud-compatible alternatives**: For each native library, look for alternative libraries or services that provide similar functionality and are compatible with cloud environments. Replace instances of JNI or JNA usage with the chosen cloud-compatible alternatives.

     * **Leverage Azure managed services**: Evaluate the use of Azure-managed services to replace certain native library functionalities. For example, if your application uses JNI or JNA for file operations, consider using Azure Storage for cloud-native storage solutions. If your application uses JNI or JNA to connect and interact with a local SQL database, consider replacing it with Azure Database for MySQL. This could eliminate the need for native code in your application.

     * **Test and validate**: Thoroughly test the updated application to ensure it works correctly with the new libraries or services. Perform functional, performance, and stress tests to validate that the application meets its requirements and can handle the expected workload.
  ruleID: jni-native-code-00000
#  TODO: Static method calls are not properly detected for some reason
  when:
    or:
    # - java.referenced:
    #    location: METHOD_CALL
    #    pattern: System.load
    - java.referenced:
        location: METHOD_CALL
        pattern: loadLibrary
    - java.referenced:
        location: METHOD_CALL
        pattern: mapLibraryName
    # - java.referenced:
    #    location: METHOD_CALL
    #    pattern: Runtime.load
    - java.referenced:
        location: CONSTRUCTOR_CALL
        pattern: com.sun.jna*
    - java.referenced:
        location: IMPORT
        pattern: com.sun.jna*
    - java.referenced:
        location: INHERITANCE
        pattern: com.sun.jna*
    - java.referenced:
        location: METHOD_CALL
        pattern: com.sun.jna*
    - java.referenced:
        location: VARIABLE_DECLARATION
        pattern: com.sun.jna*
- category: mandatory
  customVariables: []
  description: Java Native Processes
  effort: 7
  labels:
  - konveyor.io/target=cloud-readiness
  - konveyor.io/source
  - domain=cloud-native
  - category=java-native-code
  - source-category=jni-native-code
  - jni
  links: 
  - title: Advanced example for containers
    url: https://docs.microsoft.com/en-us/visualstudio/install/advanced-build-tools-container?view=vs-2019
  - title: how to register com components inside docker as regsvr32 command
    url: https://stackoverflow.com/questions/54502335/how-to-register-com-components-inside-docker-as-regsvr32-command-executes-succes
  - title: How to containerize the .NET Framework web apps with Windows Containers and Docker
    url: https://github.com/dotnet-architecture/eShopModernizing/wiki/02.-How-to-containerize-the-.NET-Framework-web-apps-with-Windows-Containers-and-Docker
  - title: Windows Application 32 bit COM dll registration
    url: https://forums.docker.com/t/windows-application-32-bit-com-dll-registration/47205/8
  message: |-
    When migrating an application that uses native processes to Azure, it's important to consider that native processes might not run in a cloud or container environment. Instead, you can refactor your application to use cloud-compatible alternatives or managed services.

     * **Identify native process dependencies**: Review all native processes used in your application and understand the purpose of each process.

     * **Evaluate and use cloud-compatible alternatives**: For each native process, look for alternative libraries, services, or APIs that provide similar functionality and are compatible with cloud environments. Replace instances of native process usage with the chosen cloud-compatible alternatives.

     * **Leverage Azure managed services**: Evaluate the use of Azure-managed services to replace certain native process functionalities.

     * **Test and validate**: Thoroughly test the updated application to ensure it works correctly with the new libraries or services. Perform functional, performance, and stress tests to validate that the application meets its requirements and can handle the expected workload.
  ruleID: jni-native-code-00001
  when:
    or:
    - java.referenced:
        location: CONSTRUCTOR_CALL
        pattern: java.lang.Process
    - java.referenced:
        location: IMPORT
        pattern: java.lang.Process
    - java.referenced:
        location: INHERITANCE
        pattern: java.lang.Process
    - java.referenced:
        location: VARIABLE_DECLARATION
        pattern: java.lang.Process
    - java.referenced:
        location: CONSTRUCTOR_CALL
        pattern: java.lang.ProcessBuilder
    - java.referenced:
        location: IMPORT
        pattern: java.lang.ProcessBuilder
    - java.referenced:
        location: INHERITANCE
        pattern: java.lang.ProcessBuilder
    - java.referenced:
        location: VARIABLE_DECLARATION
        pattern: java.lang.ProcessBuilder
    - java.referenced:
        location: CONSTRUCTOR_CALL
        pattern: java.lang.ProcessHandle
    - java.referenced:
        location: IMPORT
        pattern: java.lang.ProcessHandle
    - java.referenced:
        location: INHERITANCE
        pattern: java.lang.ProcessHandle
    - java.referenced:
        location: VARIABLE_DECLARATION
        pattern: java.lang.ProcessHandle
