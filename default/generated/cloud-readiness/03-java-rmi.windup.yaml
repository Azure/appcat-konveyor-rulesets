- category: mandatory
  customVariables: []
  description: Java Remote Method Invocation (RMI) service
  effort: 7
  labels:
  - konveyor.io/source=java
  - konveyor.io/source=rmi
  - konveyor.io/target=cloud-readiness
  - cloud-readiness
  - rmi
  links:
  - title: Twelve-factor app - Backing services
    url: https://12factor.net/backing-services
  - title: Azure SignalR Service
    url: https://learn.microsoft.com/azure/azure-signalr/signalr-overview
  - title: Azure Service Bus
    url: https://learn.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview
  - title: Azure Event Hubs
    url: https://docs.microsoft.com/azure/event-hubs/event-hubs-about
  message: |-
    When migrating an application that uses Java Remote Method Invocation (RMI) service to Azure, it's crucial to consider that RMI is a tightly coupled service and tight coupling is not suitable in a cloud environment because of scalability problems.

     Here are some recommendations for migrating such an application to Azure:

     * **Use HTTP-based communication**: Replace RMI with a more loosely coupled communication approach, such as HTTP or HTTPS, in combination with an architectural pattern like RESTful APIs.

     * **Leverage Azure managed services**: You can also consider using Azure managed services to replace RMI. For real-time, bidirectional communication that require low-latency, consider integrating Azure SignalR Service. It simplifies real-time web functionality and supports WebSocket communication. For asynchronous, message-based communication, consider using Azure messaging services like Azure Service Bus or Azure Event Hubs.
  ruleID: java-rmi-00000
  tag:
  - Java Remote Method Invocation (RMI) service
  when:
    java.referenced:
      location: INHERITANCE
      pattern: java.rmi.Remote
- customVariables: []
  description: Java Remote Method Invocation (RMI) API
  labels:
  - konveyor.io/source=java
  - konveyor.io/source=rmi
  - konveyor.io/target=cloud-readiness
  - cloud-readiness
  - rmi
  links: []
  message: "\n                            When migrating an application that uses
    Java Remote Method Invocation (RMI) API to Azure, it's crucial to consider that
    RMI is a tightly coupled service and tight coupling is not suitable in a cloud
    environment because of scalability problems.\n\n                            Here
    are some recommendations for migrating such an application to Azure:\n\n                            *
    **Use HTTP-based communication**: Replace RMI with a more loosely coupled communication
    approach, such as HTTP or HTTPS, in combination with an architectural pattern
    like RESTful APIs.\n\n                            * **Leverage Azure managed services**:
    You can also consider using Azure managed services to replace RMI. For real-time,
    bidirectional communication that require low-latency, consider integrating Azure
    SignalR Service. It simplifies real-time web functionality and supports WebSocket
    communication. For asynchronous, message-based communication, consider using Azure
    messaging services like Azure Service Bus or Azure Event Hubs.\n                            "
  ruleID: java-rmi-00001
  tag:
  - rmi
  - Java Remote Method Invocation (RMI) API
  when:
    java.referenced:
      location: PACKAGE
      pattern: java.rmi*
