- category: potential
  customVariables: []
  description: Embedded library - Spring Cloud Config
  effort: 0
  labels:
  - konveyor.io/include=always
  links:
  - title: Prepare the Spring Cloud Config server
    url: https://learn.microsoft.com/azure/developer/java/migration/migrate-spring-cloud-to-azure-spring-apps?pivots=sc-standard-tier#prepare-the-spring-cloud-config-server
  message: |-
    The application embeds Spring Cloud Config.

     If you are migrating to Azure Spring Apps, the connection info of Config Server will be injected automatically upon app start.
     Find any explicit configurations of config server connection info:

     If configured in **configuration files**: they will be ignored and overrided by Azure Spring Apps.

     If configured in **command line parameters**, **Java system attribute**, **environment variable**: they need to be removed or you might experience conflicts and unexpected behavior.

     Configure the config server after creating an Azure Spring Apps instance.
  ruleID: configuration-management-0100
  tag:
  - Spring Cloud Config
  when:
    or:
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.cloud.spring-cloud-config-client
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.cloud.spring-cloud-starter-config
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.cloud.spring-cloud-config-client
- customVariables: []
  description: Application properties file detected
  labels:
  - konveyor.io/include=always
  links: []
  message: Application properties file detected
  ruleID: configuration-management-0200
  tag:
  - Application Properties File
  - Application properties file detected
  when:
    builtin.file:
      pattern: ^application(-[a-zA-Z0-9]+)*?\.(properties|yml|yaml)$
- customVariables: []
  description: Spring datasource properties detected
  labels:
  - konveyor.io/include=always
  links: []
  message: Spring datasource properties detected
  ruleID: configuration-management-0300
  tag:
  - Spring Properties
  - Spring datasource properties detected
  when:
    builtin.filecontent:
      filePattern: (/|\\)application(-[a-zA-Z0-9]+)*?\.(properties|yml|yaml)$
      pattern: spring.datasource
- customVariables: []
  description: Spring logging properties detected
  labels:
  - konveyor.io/include=always
  links: []
  message: Spring logging properties detected
  ruleID: configuration-management-0400
  tag:
  - Spring Properties
  - Spring logging properties detected
  when:
    builtin.filecontent:
      filePattern: (/|\\)application(-[a-zA-Z0-9]+)*?\.(properties|yml|yaml)$
      pattern: logging.level.org.springframework
- customVariables: []
  description: Spring configuration properties annotation detected
  labels:
  - konveyor.io/include=always
  links: []
  message: Spring configuration properties annotation detected
  ruleID: configuration-management-0500
  tag:
  - Spring Properties
  - Spring configuration properties annotation detected
  when:
    java.referenced:
      location: ANNOTATION
      pattern: org.springframework.boot.context.properties.ConfigurationProperties
- category: potential
  customVariables: []
  description: Embedded library - Spring Cloud Vault
  effort: 0
  labels:
  - konveyor.io/include=always
  links:
  - title: Load a secret from Azure Key Vault in a Spring Boot application
    url: https://learn.microsoft.com/azure/developer/java/spring-framework/configure-spring-boot-starter-java-app-with-azure-key-vault
  - title: Azure Key Vault
    url: https://learn.microsoft.com/azure/key-vault/general/overview
  message: |-
    The application embeds Spring Cloud Vault.
     To migrate a Java application that uses Spring Cloud Vault to store and access secrets to Azure, you can follow this recommendation:

     * Identify the backing secret store (for example, HashiCorp Vault or CredHub).

     * Identify all the secrets used by the application code.

     * Migrate Spring Cloud Vault secrets to Azure KeyVault. You can inject secrets directly into applications through Spring by using the Azure KeyVault Spring Boot Starter.

     * Note that Migration may require you to rename some secrets. Update your application code accordingly.
  ruleID: configuration-management-0600
  tag:
  - Spring Cloud Vault
  when:
    or:
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.cloud.spring-cloud-starter-vault-config
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.cloud.spring-cloud-vault-config
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.cloud.spring-cloud-vault-config
    - builtin.filecontent:
        filePattern: (/|\\)([a-zA-Z0-9._-]+)\.{extensions}$
        pattern: spring.cloud.vault
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)spring-cloud-vault([a-zA-Z0-9._-]*)\.jar$
