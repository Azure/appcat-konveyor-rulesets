- customVariables: []
  description: Embedded technology - Java Server Faces
  labels:
  - konveyor.io/include=always
  links: []
  message: The application uses Java Server Faces
  ruleID: web-01000
  tag:
  - JSF
  - Embedded technology - Java Server Faces
  when:
    builtin.filecontent:
      filePattern: (/|\\)([a-zA-Z0-9._-]+)\.(jsp|xhtml|jspx)$
      pattern: (java\.sun\.com/jsf/)|(xmlns\.jcp\.org/jsf)
- customVariables: []
  description: Embedded technology - Java Server Pages
  labels:
  - konveyor.io/include=always
  links: []
  message: The application uses Java Server Pages
  ruleID: technology-usage-web-01100
  tag:
  - JSP
  - Embedded technology - Java Server Pages
  when:
    or:
    - builtin.filecontent:
        filePattern: (/|\\)([a-zA-Z0-9._-]+)\.(jsp|jspx|tag|tagx)$
        pattern: <%@\s*page\s+[^>]*\s*import\s*=\s*['"]([^'"]+)['"].*?%>
    - builtin.filecontent:
        filePattern: (/|\\)([a-zA-Z0-9._-]+)\.(jsp|jspx|tag|tagx)$
        pattern: <%@\s*taglib\s+[^>]*\s*uri\s*=\s*['"]([^'"]+)['"].*?%>
- customVariables: []
  description: Embedded technology - WebSocket
  labels:
  - konveyor.io/include=always
  links: []
  message: The application uses WebSockets
  ruleID: technology-usage-web-01300
  tag:
  - WebSocket
  - Embedded technology - WebSocket
  when:
    java.referenced:
      location: ANNOTATION
      pattern: javax.websocket.server.ServerEndpoint
- customVariables: []
  description: Embedded technology - Applet
  labels:
  - konveyor.io/include=always
  links: []
  message: The application uses Java Applets
  ruleID: technology-usage-web-01400
  tag:
  - Applet
  - Embedded technology - Applet
  when:
    or:
    - java.referenced:
        location: INHERITANCE
        pattern: java.applet.Applet
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)applet([a-zA-Z0-9._-]*)\.jar$
- customVariables: []
  description: Embedded technology - JNLP
  labels:
  - konveyor.io/include=always
  links: []
  message: The application uses JNLP (Java Network Launching Protocol)
  ruleID: technology-usage-web-01500
  tag:
  - JNLP
  - Embedded technology - JNLP
  when:
    builtin.file:
      pattern: ^([a-zA-Z0-9._-]+)\.jnlp$
- customVariables: []
  description: Embedded technology - JNLP
  labels:
  - konveyor.io/include=always
  links: []
  message: The application uses JNLP (Java Network Launching Protocol)
  ruleID: technology-usage-web-01600
  tag:
  - JNLP
  - Embedded technology - JNLP
  when:
    or:
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)jnlp([a-zA-Z0-9._-]*)\.jar$
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)webstart([a-zA-Z0-9._-]*)\.jar$
- category: potential
  customVariables: []
  description: Java Swing usage
  effort: 3
  labels:
  - konveyor.io/include=always
  links:
  - title: Azure Container Registry documentation
    url: https://learn.microsoft.com/azure/container-registry
  - title: Azure Container Instances documentation
    url: https://learn.microsoft.com/azure/container-instances
  - title: Azure Container Apps documentation
    url: https://learn.microsoft.com/azure/container-apps/overview
  message: |-
    The application uses Java Swing for the graphical user interface.
     Java Swing requires the JRE on the remote device.

     * **Containerize** the Java Swing application: Build the Docker image so that it packages the application and the JRE, and push it to Azure Container Registry (ACR). Then you can deploy the container to Azure using Azure Container Instances (ACI), Azure Container Apps (ACA) or Azure Kubernetes Service (AKS).

     * **Leverage Azure Virtual Machines (VMs)**: Create a Windows or Linux-based Azure VM with the appropriate configuration for hosting your Java Swing application. For this, install the required Java Development Kit (JDK) and Java Swing runtime on the Azure VM.

     * **Consider performance**: Java Swing applications require the GUI to be rendered, which may bring performance and scalability limitations. Also check the networking requirements when selecting the appropriate Azure service for your Java Swing application.
  ruleID: technology-usage-web-01700
  tag:
  - Swing
  when:
    or:
    - java.referenced:
        location: IMPORT
        pattern: javax.swing*
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)swing([a-zA-Z0-9._-]*)\.jar$
- customVariables: []
  description: Embedded technology - MiGLayout
  labels:
  - konveyor.io/include=always
  links: []
  message: The application uses MyGLayout
  ruleID: technology-usage-web-01800
  tag:
  - MiGLayout
  - Embedded technology - MiGLayout
  when:
    builtin.file:
      pattern: ^([a-zA-Z0-9._-]*)miglayout([a-zA-Z0-9._-]*)\.jar$
- customVariables: []
  description: Embedded technology - JGoodies
  labels:
  - konveyor.io/include=always
  links: []
  message: The application uses JGoodies
  ruleID: technology-usage-web-01900
  tag:
  - JGoodies
  - Embedded technology - JGoodies
  when:
    builtin.file:
      pattern: ^([a-zA-Z0-9._-]*)jgoodies([a-zA-Z0-9._-]*)\.jar$
- customVariables: []
  description: Embedded technology - FormLayoutMaker
  labels:
  - konveyor.io/include=always
  links: []
  message: The application uses FormLayouttMaker
  ruleID: technology-usage-web-02000
  tag:
  - FormLayoutMaker
  - Embedded technology - FormLayoutMaker
  when:
    builtin.file:
      pattern: ^([a-zA-Z0-9._-]*)formlayoutmakerx([a-zA-Z0-9._-]*)\.jar$
- customVariables: []
  description: Embedded technology - MagicGroupLayout
  labels:
  - konveyor.io/include=always
  links: []
  message: The application uses MagicGroupLayout
  ruleID: technology-usage-web-02100
  tag:
  - Magicgrouplayout
  - Embedded technology - MagicGroupLayout
  when:
    builtin.file:
      pattern: ^([a-zA-Z0-9._-]*)magicgrouplayout([a-zA-Z0-9._-]*)\.jar$
- customVariables: []
  description: Embedded technology - Standard Widget Toolkit (SWT)
  labels:
  - konveyor.io/include=always
  links: []
  message: The application uses Standard Widget Toolkit (SWT)
  ruleID: technology-usage-web-02200
  tag:
  - SWT
  - Embedded technology - Standard Widget Toolkit (SWT)
  when:
    builtin.file:
      pattern: ^([a-zA-Z0-9._-]*)swt([a-zA-Z0-9._-]*)\.jar$
- category: potential
  customVariables: []
  description: JavaFX usage
  effort: 3
  labels:
  - konveyor.io/include=always
  links:
  - title: Azure Container Registry documentation
    url: https://learn.microsoft.com/azure/container-registry
  - title: Azure Container Instances documentation
    url: https://learn.microsoft.com/azure/container-instances
  - title: Azure Container Apps documentation
    url: https://learn.microsoft.com/azure/container-apps/overview
  message: |-
    The application uses JavaFX for the graphical user interface.
     JavaFX requires the JRE on the remote device.

     * **Containerize** the JavaFX application: Build the Docker image so that it packages the application and the JRE, and push it to Azure Container Registry (ACR). Then you can deploy the container to Azure using Azure Container Instances (ACI), Azure Container Apps (ACA) or Azure Kubernetes Service (AKS).

     * **Leverage Azure Virtual Machines (VMs)**: Create a Windows or Linux-based Azure VM with the appropriate configuration for hosting your JavaFX application. For this, install the required Java Development Kit (JDK) and JavaFX runtime on the Azure VM.

     * **Consider performance**: JavaFX applications require the GUI to be rendered, which may bring performance and scalability limitations. Also check the networking requirements when selecting the appropriate Azure service for your JavaFX application.
  ruleID: technology-usage-web-02300
  tag:
  - JavaFX
  when:
    builtin.file:
      pattern: ^([a-zA-Z0-9._-]*)javafx([a-zA-Z0-9._-]*)\.jar$
- customVariables: []
  description: Embedded technology - Eclipse RCP
  labels:
  - konveyor.io/include=always
  links: []
  message: The application uses Eclipse RCP
  ruleID: technology-usage-web-02400
  tag:
  - Eclipse RCP
  - Embedded technology - Eclipse RCP
  when:
    or:
    - builtin.file:
        pattern: ^rcp([a-zA-Z0-9._-]*)\.jar$
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)eclipse\.rcp([a-zA-Z0-9._-]*)\.jar$
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)eclipse([a-zA-Z0-9._-]*)runtime([a-zA-Z0-9._-]*)\.jar$
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)eclipse\.ui([a-zA-Z0-9._-]*)\.jar$
