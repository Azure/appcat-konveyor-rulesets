- category: mandatory
  customVariables: []
  description: AWS credential configuration
  effort: 3
  labels:
  - konveyor.io/target=azure-spring-apps
  - konveyor.io/target=azure-appservice
  - konveyor.io/target=azure-aks
  - konveyor.io/target=azure-container-apps
  - konveyor.io/source
  - AWS
  links:
  - title: Azure Key Vault documentation
    url: https://learn.microsoft.com/azure/key-vault
  - title: 'Quickstart: Azure Key Vault Secret client library for Java'
    url: https://learn.microsoft.com/azure/key-vault/secrets/quick-create-java
  - title: Azure Active Directory documentation
    url: https://learn.microsoft.com/azure/active-directory
  message: |-
    The application contains AWS credential configuration.

     * Migrate credentials to **Azure Key Vault**: Create an Azure Key Vault to securely store your application's credentials and sensitive information. Migrate the AWS credentials to Azure Key Vault, which provides a centralized and highly secure storage solution.

     * **Modify application code**: Update the Java application's code to retrieve the required credentials from Azure Key Vault instead of AWS. Use the appropriate Azure SDK or libraries to integrate with Azure Key Vault and fetch the credentials securely during runtime.

     * Implement **Azure Active Directory (Azure AD) authentication**: If the AWS credentials are used for authentication purposes, consider migrating to Azure AD for user authentication and authorization. Implement Azure AD authentication in your Java application to ensure secure access to Azure resources.
  ruleID: azure-aws-config-credential-01000
  when:
    or:
    - builtin.filecontent:
        filePattern: ""
        pattern: aws_access_key_id
    - builtin.filecontent:
        filePattern: ""
        pattern: aws_secret_access_key
    - builtin.filecontent:
        filePattern: ""
        pattern: aws.credentials
- category: mandatory
  customVariables: []
  description: AWS region configuration
  effort: 3
  labels:
  - konveyor.io/target=azure-spring-apps
  - konveyor.io/target=azure-appservice
  - konveyor.io/target=azure-aks
  - konveyor.io/target=azure-container-apps
  - konveyor.io/source
  - AWS
  links:
  - title: Azure geographies
    url: https://azure.microsoft.com/explore/global-infrastructure/geographies
  message: |-
    The application contains AWS region configuration.

     * Identify **Azure regions**: Determine the Azure regions that align with your application's requirements for availability, latency, compliance, and data residency. Azure provides a wide range of regions globally.

     * Update **configuration settings**: Modify the Java application's configuration to replace the AWS region configuration with the corresponding Azure region configuration. Update the code or configuration files to reflect the Azure region names or identifiers.
  ruleID: azure-aws-config-region-02000
  when:
    or:
    - builtin.filecontent:
        filePattern: ""
        pattern: aws.region
    - builtin.filecontent:
        filePattern: ""
        pattern: AWS_REGION
    - builtin.filecontent:
        filePattern: ""
        pattern: AWSRegion
- category: mandatory
  customVariables: []
  description: AWS S3 configuration
  effort: 3
  labels:
  - konveyor.io/target=azure-spring-apps
  - konveyor.io/target=azure-appservice
  - konveyor.io/target=azure-aks
  - konveyor.io/target=azure-container-apps
  - konveyor.io/source
  - AWS
  links:
  - title: Azure Blob Storage documentation
    url: https://learn.microsoft.com/azure/storage/blobs
  - title: 'Quickstart: Azure Blob Storage client library for Java'
    url: https://learn.microsoft.com/azure/storage/blobs/storage-quickstart-blobs-java
  - title: Move your data from AWS S3 to Azure Storage using AzCopy
    url: https://azure.microsoft.com/blog/move-your-data-from-aws-s3-to-azure-storage-using-azcopy
  message: |-
    The application contains AWS S3 configuration. Consider using Azure Blob Storage instead.

     * Provision **Azure Blob Storage**: Create an Azure Blob Storage account in the Azure portal. Choose the appropriate storage tier (Hot, Cool, or Archive) based on your application's data access patterns and cost considerations.

     * **Update application code**: Modify the Java application's code to replace AWS SDK calls with the equivalent Azure Storage SDK calls for Azure Blob Storage. Update the code to authenticate and interact with Azure Blob Storage using the Azure SDK for Java.

     * **Map S3 functionality** to Azure Blob Storage: Understand the differences between AWS S3 and Azure Blob Storage, and adjust your application logic accordingly. Map S3 concepts (buckets, objects, permissions, etc.) to their Azure Blob Storage equivalents (containers, blobs, shared access signatures, etc.).

     * **Migrate data** from S3 to Azure Blob Storage: Plan and execute the migration of your data from AWS S3 to Azure Blob Storage. You can use Azure Storage Data Transfer Tool, AzCopy, or other migration tools to copy the data from S3 buckets to Azure Blob Storage containers.

     * Update **access permissions**: Adjust the access permissions and policies in Azure Blob Storage to match your application's requirements. Azure provides various options for controlling access, including shared access signatures (SAS), Azure AD authentication, and role-based access control (RBAC).

     * Validate functionality and **performance**: Thoroughly test the updated application to ensure that it can read from and write to Azure Blob Storage correctly. Validate the performance of data transfer and any other operations to ensure they meet your application's requirements.
  ruleID: azure-aws-config-s3-03000
  when:
    or:
    - builtin.filecontent:
        filePattern: ""
        pattern: aws.s3
- category: mandatory
  customVariables: []
  description: Amazon Simple Queue Service configuration
  effort: 3
  labels:
  - konveyor.io/target=azure-spring-apps
  - konveyor.io/target=azure-appservice
  - konveyor.io/target=azure-aks
  - konveyor.io/target=azure-container-apps
  - konveyor.io/source
  - AWS
  links:
  - title: Azure Service Bus documentation
    url: https://learn.microsoft.com/azure/service-bus-messaging
  - title: Azure Service Bus libraries for Java
    url: https://learn.microsoft.com/java/api/overview/azure/service-bus
  message: |-
    The application contains Amazon Simple Queue Service configuration. Consider using Azure Service Bus instead.

     * **Provision Azure Service Bus**: Create an Azure Service Bus namespace in Azure. Azure Service Bus provides reliable message queuing and publish/subscribe capabilities, serving as an equivalent messaging service to Amazon SQS.

     * **Update application code**: Modify the Java application's code to replace the AWS SDK calls with the equivalent Azure Service Bus client libraries and APIs. Update the code to authenticate and interact with Azure Service Bus using the Azure SDK for Java.

     * **Map SQS functionality** to Azure Service Bus: Understand the differences between Amazon SQS and Azure Service Bus and adjust your application logic accordingly. Map SQS concepts (queues, messages, visibility timeouts, etc.) to their Azure Service Bus equivalents (queues, messages, lock duration, etc.).

     * **Migrate queues and messages**: Plan and execute the migration of your queues and messages from Amazon SQS to Azure Service Bus.
  ruleID: azure-aws-config-sqs-04000
  when:
    or:
    - builtin.filecontent:
        filePattern: ""
        pattern: aws.sqs
- category: mandatory
  customVariables: []
  description: AWS Secrets Manager configuration
  effort: 3
  labels:
  - konveyor.io/target=azure-spring-apps
  - konveyor.io/target=azure-appservice
  - konveyor.io/target=azure-aks
  - konveyor.io/target=azure-container-apps
  - konveyor.io/source
  - AWS
  links:
  - title: Azure Key Vault documentation
    url: https://learn.microsoft.com/azure/key-vault
  - title: 'Quickstart: Azure Key Vault Secret client library for Java'
    url: https://learn.microsoft.com/azure/key-vault/secrets/quick-create-java
  - title: Azure Key Vault CLI
    url: https://learn.microsoft.com/cli/azure/keyvault
  message: |-
    The application contains AWS Secrets Manager configuration. Consider using Azure Key Vault instead.

     * **Provision Azure Key Vault**: Create an Azure Key Vault in Azure. Azure Key Vault provides a secure and centralized location for storing secrets, certificates, and keys.

     * **Migrate secrets** to Azure Key Vault: Identify the secrets stored in AWS Secrets Manager and migrate them to Azure Key Vault. Use the Azure Key Vault SDK or CLI to programmatically create the equivalent secrets in Azure Key Vault or manually import them as needed.

     * **Update application code**: Modify the Java application's code to replace the AWS SDK calls with the equivalent Azure Key Vault SDK or libraries. Update the code to authenticate and retrieve secrets from Azure Key Vault using the Azure SDK for Java.

     * **Secure access** to Azure Key Vault: Implement access control and security measures for Azure Key Vault. Configure Azure AD authentication, RBAC, and access policies to ensure that only authorized applications and users can access the secrets stored in Azure Key Vault.
  ruleID: azure-aws-config-secret-manager-05000
  when:
    or:
    - builtin.filecontent:
        filePattern: ""
        pattern: aws.secretsmanager
    - builtin.filecontent:
        filePattern: ""
        pattern: aws-secretsmanager