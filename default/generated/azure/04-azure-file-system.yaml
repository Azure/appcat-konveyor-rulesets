# - category: optional
#   customVariables: []
#   description: Relative path found
#   effort: 5
#   labels:
#   - konveyor.io/source=eap7
#   - konveyor.io/source=eap
#   - konveyor.io/source=springboot
#   - konveyor.io/target=azure-appservice
#   - konveyor.io/target=azure-aks
#   - konveyor.io/target=azure-container-apps
#   - domain=cloud-native
#   - category=file-system-management
#   - source-category=local-file-system
#   - file-system
#   links:
#   - title: Relative path found in the application
#     url: https://learn.microsoft.com/azure/developer/java/migration/migrate-spring-boot-to-azure-container-apps#determine-whether-and-how-the-file-system-is-used
#   - title: Azure Storage documentation
#     url: https://learn.microsoft.com/azure/storage
#   - title: Create an Azure Files volume mount in Azure Container Apps
#     url: https://learn.microsoft.com/azure/container-apps/storage-mounts-azure-files
#   - title: Use storage mounts in Azure Container Apps
#     url: https://learn.microsoft.com/azure/container-apps/storage-mounts
#   - title: Azure Monitor Logs overview
#     url: https://learn.microsoft.com/azure/azure-monitor/logs/data-platform-logs
#   - title: Azure Cache for Redis documentation
#     url: https://learn.microsoft.com/azure/azure-cache-for-redis
#   - title: Azure App Configuration documentation
#     url: https://learn.microsoft.com/azure/azure-app-configuration
#   message: |-
#     Relative path found in the application. An application running inside a container could lose access to a file in local storage.
#      To migrate a Java application that uses file system to Azure:

#      * **Identify the usage of the file system**: Find any instances where your services write to and/or read from the local file system. Identify where short-term/temporary files are written and read, which require ephemeral storage, and where long-lived files are written and read, which require persistent storage. Ephemeral storage only persists until the cloud environment is restarted, while persistent storage is required for data that needs to persist across restarts.

#      The following recommendations depend on the function of the file in local storage:

#      * **Reading/writing files**: If persistent storage is needed, consider using Azure File Share or Azure Blob Storage. Mounting an Azure File Share allows your application to access files via the mount location. Using Azure Blob Storage provides a scalable object store for data objects, such as text or binary files, accessible directly in your code.

#      * **Logging**: Log to standard output and use Azure Monitor to collect and analyze the logs.

#      * **Caching**: Use Azure Cache for Redis as a cache backing service.

#      * **Configuration**: Store configuration in Azure App Configuration instead of using the file system. Also store configuration settings in environment variables so that they can be updated without code changes.
#   ruleID: azure-file-system-02000
#   when:
#     or:
#     - builtin.filecontent:
#         filePattern: (/|\\)([a-zA-Z0-9._-]+)\.java$
#         pattern: \b(?:var|let|const|String\s+)?\w+\s*=\s*["'](\.{1,2}\/[-\w\/.]*)["']\s*;
#     - builtin.filecontent:
#         filePattern: (/|\\)([a-zA-Z0-9._-]+)\.(properties|yaml|yml|xml)$
#         pattern: ^(?!.*(^\s*-?\s*(run|init|command|cmd|script|exec)\s*:.*\.\/|<!--.*\.\/|\.\/.*-->|#.*\.\/)).*\.\/\S+
# - category: optional
#   customVariables: []
#   description: Home path found
#   effort: 5
#   labels:
#   - konveyor.io/source=eap7
#   - konveyor.io/source=eap
#   - konveyor.io/source=springboot
#   - konveyor.io/target=azure-appservice
#   - konveyor.io/target=azure-aks
#   - konveyor.io/target=azure-container-apps
#   - domain=cloud-native
#   - category=file-system-management
#   - source-category=local-file-system
#   - file-system
#   links:
#   - title: Home path found in the application
#     url: https://learn.microsoft.com/azure/developer/java/migration/migrate-spring-boot-to-azure-container-apps#determine-whether-and-how-the-file-system-is-used
#   - title: Azure Storage documentation
#     url: https://learn.microsoft.com/azure/storage
#   - title: Create an Azure Files volume mount in Azure Container Apps
#     url: https://learn.microsoft.com/azure/container-apps/storage-mounts-azure-files
#   - title: Use storage mounts in Azure Container Apps
#     url: https://learn.microsoft.com/azure/container-apps/storage-mounts
#   - title: Azure Monitor Logs overview
#     url: https://learn.microsoft.com/azure/azure-monitor/logs/data-platform-logs
#   - title: Azure Cache for Redis documentation
#     url: https://learn.microsoft.com/azure/azure-cache-for-redis
#   - title: Azure App Configuration documentation
#     url: https://learn.microsoft.com/azure/azure-app-configuration
#   message: |-
#     Home path found in the application. An application running inside a container could lose access to a file in local storage.
#      To migrate a Java application that uses file system to Azure:

#      * **Identify the usage of the file system**: Find any instances where your services write to and/or read from the local file system. Identify where short-term/temporary files are written and read, which require ephemeral storage, and where long-lived files are written and read, which require persistent storage. Ephemeral storage only persists until the cloud environment is restarted, while persistent storage is required for data that needs to persist across restarts.

#      The following recommendations depend on the function of the file in local storage:

#      * **Reading/writing files**: If persistent storage is needed, consider using Azure File Share or Azure Blob Storage. Mounting an Azure File Share allows your application to access files via the mount location. Using Azure Blob Storage provides a scalable object store for data objects, such as text or binary files, accessible directly in your code.

#      * **Logging**: Log to standard output and use Azure Monitor to collect and analyze the logs.

#      * **Caching**: Use Azure Cache for Redis as a cache backing service.

#      * **Configuration**: Store configuration in Azure App Configuration instead of using the file system. Also store configuration settings in environment variables so that they can be updated without code changes.
#   ruleID: azure-file-system-03000
#   when:
#     builtin.filecontent:
#       filePattern: (/|\\)([a-zA-Z0-9._-]+)\.(properties|yaml|yml|xml)$
#       pattern: (?i)(["'=]\s*|\s|^)\/home[\p{L}0-9_\/-]*(?=\/|$|\s|["'])
