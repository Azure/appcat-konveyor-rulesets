- category: mandatory
  customVariables: []
  description: Detect OpenLiberty Data Source configurations
  effort: 3
  labels:
  - konveyor.io/source=java-ee
  - konveyor.io/target=azure-aks
  - domain=azure-readiness
  - category=openliberty-migration
  - openliberty
  message: |
    Detected OpenLiberty data source configurations that need to be migrated to Azure database services.
    
    **Migration Options:**
    * **Azure Database for MySQL/PostgreSQL/SQL Server**: Use fully managed Azure database services for better scalability, security, and maintenance
    * **Connection String Updates**: Update connection strings to point to Azure database endpoints
    * **Credential Management**: Store database credentials securely in Azure Key Vault or Kubernetes Secrets
    * **High Availability**: Configure geo-replication and backup strategies for production workloads
    
    **Implementation Steps:**
    1. Create managed Azure database service matching your current database type
    2. Update server.xml dataSource configuration with new connection details
    3. Configure connection pooling optimized for cloud environments
    4. Implement proper security and monitoring practices
  links:
  - title: "Azure Database for PostgreSQL documentation"
    url: "https://learn.microsoft.com/en-us/azure/postgresql/"
  - title: "Azure Database for MySQL documentation" 
    url: "https://learn.microsoft.com/en-us/azure/mysql/"
  - title: "Azure SQL Database documentation"
    url: "https://learn.microsoft.com/en-us/azure/azure-sql/database/"
  - title: "Store credentials in Azure Key Vault"
    url: "https://learn.microsoft.com/en-us/azure/key-vault/general/overview"
  - title: "OpenLiberty DataSource configuration"
    url: "https://openliberty.io/docs/latest/data-persistence-jpa.html"
  ruleID: openliberty-database-00001
  when:
    builtin.xml:
      filepaths:
      - server.xml
      namespaces: {}
      xpath: //server/dataSource
- category: mandatory
  customVariables: []
  description: Detect EntityManager usage in application code
  effort: 4
  labels:
  - konveyor.io/source=java-ee
  - konveyor.io/target=azure-aks
  - domain=azure-readiness
  - category=openliberty-migration
  - openliberty
  message: |
    Detected JPA EntityManager usage that will require configuration updates when migrating to Azure.
    
    **Migration Considerations:**
    * **Persistence Configuration**: Ensure your persistence.xml is properly configured for Azure database services
    * **Connection Pooling**: Use cloud-optimized connection pools like HikariCP for better performance
    * **Resilience Patterns**: Implement retry logic and circuit breakers for database operations
    * **High Availability**: Consider using read replicas with appropriate transaction isolation levels
    * **Security**: Use managed identity or Azure Key Vault for database authentication
    
    **Implementation Steps:**
    1. Update persistence.xml with Azure-compatible configurations
    2. Configure HikariCP connection pooling for optimal cloud performance
    3. Implement proper exception handling and retry mechanisms
    4. Set up monitoring and health checks for database connectivity
  links:
  - title: "JPA and Hibernate on Azure"
    url: "https://learn.microsoft.com/en-us/azure/developer/java/spring-framework/configure-spring-data-jpa-with-azure-sql-server"
  - title: "HikariCP Connection Pool Configuration"
    url: "https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby"
  - title: "Azure SQL Database connectivity best practices"
    url: "https://learn.microsoft.com/en-us/azure/azure-sql/database/develop-overview"
  ruleID: openliberty-database-00002
  when:
    java.referenced:
      location: IMPORT
      pattern: javax.persistence.EntityManager
- category: mandatory
  customVariables: []
  description: Detect database driver configurations
  effort: 3
  labels:
  - konveyor.io/source=java-ee
  - konveyor.io/target=azure-aks
  - domain=azure-readiness
  - category=openliberty-migration
  - openliberty
  message: |
    Detected database driver configurations that need to be included in your container image when migrating to AKS.
    
    **Migration Considerations:**
    * **Container Image**: Include appropriate JDBC drivers in your application container image
    * **Driver Compatibility**: Verify driver compatibility with Azure managed database services
    * **Version Management**: Use latest stable driver versions for security and performance
    * **Configuration Updates**: Update driver-specific configurations for cloud environments
    * **Connection Security**: Enable SSL/TLS connections for secure database communication
    
    **Implementation Steps:**
    1. Add JDBC drivers to your Maven/Gradle dependencies
    2. Configure SSL connections in your connection strings
    3. Test driver compatibility with Azure database services
    4. Set up proper connection timeouts and retry policies
  links:
  - title: "JDBC driver for SQL Server"
    url: "https://learn.microsoft.com/en-us/sql/connect/jdbc/microsoft-jdbc-driver-for-sql-server"
  - title: "Connect to Azure Database for MySQL"
    url: "https://learn.microsoft.com/en-us/azure/mysql/single-server/how-to-connection-string"
  - title: "Connect to Azure Database for PostgreSQL"
    url: "https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/connect-java"
  ruleID: openliberty-database-00003
  when:
    builtin.xml:
      filepaths:
      - server.xml
      namespaces: {}
      xpath: //server/library/fileset[contains(@includes, 'jdbc') or contains(@includes, 'sql') or contains(@includes, 'db') or contains(@includes, 'oracle')]
- category: mandatory
  customVariables: []
  description: Detect application-level data source references
  effort: 4
  labels:
  - konveyor.io/source=java-ee
  - konveyor.io/target=azure-aks
  - domain=azure-readiness
  - category=openliberty-migration
  - openliberty
  message: |
    Detected application-level data source references that need updating for Azure database services.
    
    **Migration Requirements:**
    * **JNDI Updates**: Update JNDI lookup references to match your Kubernetes deployment configuration
    * **Connection Pool Optimization**: Configure connection pool settings for containerized environments
    * **Cloud-Native Libraries**: Consider using cloud-optimized connection pooling libraries
    * **Environment Variables**: Use environment variables for database connection parameters
    * **Security Configuration**: Implement secure credential management practices
    
    **Implementation Steps:**
    1. Update web.xml resource references to use environment-specific JNDI names
    2. Configure external database connection properties
    3. Set up Kubernetes ConfigMaps and Secrets for database configuration
    4. Implement health checks for database connectivity
  links:
  - title: "Configure data sources in OpenLiberty"
    url: "https://openliberty.io/docs/latest/data-persistence-jpa.html"
  - title: "Kubernetes ConfigMaps"
    url: "https://kubernetes.io/docs/concepts/configuration/configmap/"
  - title: "Manage sensitive data with Secrets"
    url: "https://kubernetes.io/docs/concepts/configuration/secret/"
  ruleID: openliberty-database-00004
  when:
    builtin.xml:
      filepaths:
        - web.xml
      namespaces:
        jee: http://xmlns.jcp.org/xml/ns/javaee
      xpath: //jee:resource-ref/jee:res-type[contains(text(), 'javax.sql.DataSource')] | //jee:env-entry[contains(jee:env-entry-value, 'jdbc')]
- category: mandatory
  customVariables: []
  description: Detect Resource annotations for database injection
  effort: 4
  labels:
  - konveyor.io/source=java-ee
  - konveyor.io/target=azure-aks
  - domain=azure-readiness
  - category=openliberty-migration
  - openliberty
  message: |
    Detected @Resource annotations for database injection that need configuration updates for Azure migration.
    
    **Migration Requirements:**
    * **JNDI Name Updates**: Update JNDI names to match your Kubernetes/OpenLiberty configuration
    * **Connection Pool Settings**: Review and optimize connection pooling for containerized environments
    * **Resilience Patterns**: Implement retry logic and circuit breakers for connection failures
    * **Monitoring**: Add database connection monitoring and health checks
    * **Security**: Use managed identities or secure credential storage
    
    **Implementation Steps:**
    1. Update @Resource annotations with new Azure database JNDI names
    2. Configure OpenLiberty server.xml with Azure database connections
    3. Set up connection pooling optimized for cloud workloads
    4. Implement proper error handling and retry mechanisms
  links:
  - title: "OpenLiberty database configuration"
    url: "https://openliberty.io/docs/latest/relational-database-connections-JDBC.html"
  - title: "Azure SQL Database connection libraries"
    url: "https://learn.microsoft.com/en-us/azure/azure-sql/database/connect-query-java"
  - title: "Connection pooling best practices"
    url: "https://learn.microsoft.com/en-us/azure/azure-sql/database/develop-cplusplus-simple"
  ruleID: openliberty-database-00005
  when:
    java.referenced:
      location: ANNOTATION
      pattern: javax.annotation.Resource
      annotated:
        elements:
          - name: name
            value: jdbc/[a-zA-Z0-9_-]+
- category: mandatory
  customVariables: []
  description: Detect JNDI lookup patterns for databases
  effort: 4
  labels:
  - konveyor.io/source=java-ee
  - konveyor.io/target=azure-aks
  - domain=azure-readiness
  - category=openliberty-migration
  - openliberty
  message: |
    Detected manual JNDI lookups for database connections that need updates for Azure.
    
    **Required changes:**
    - Update JNDI references to match your Kubernetes configuration
    - Consider using CDI injection (@Resource) instead of manual lookups
    - Configure OpenLiberty server.xml with Azure database connections
    
    **Implementation Steps:**
    1. Update JNDI names to match your container deployment
    2. Configure proper connection pooling for cloud environments
    3. Implement proper error handling and retry mechanisms
  ruleID: openliberty-database-00007
  when:
    builtin.filecontent:
      filePattern: .*\.java
      pattern: \.lookup\(\s*["'][^"']*jdbc[^"']*["']\s*\)
- category: mandatory
  customVariables: []
  description: Detect persistence.xml configurations
  effort: 4
  labels:
  - konveyor.io/source=java-ee
  - konveyor.io/target=azure-aks
  - domain=azure-readiness
  - category=openliberty-migration
  - openliberty
  message: |
    Detected JPA persistence.xml configurations with database references that need updates for Azure migration.
    
    **Migration Requirements:**
    * **Database Properties**: Update database connection properties for Azure cloud environments
    * **Connection Pooling**: Configure cloud-optimized connection pool settings
    * **Environment Configuration**: Use environment-specific properties for different deployment stages
    * **Dialect Updates**: Ensure proper Hibernate dialect for Azure database services
    * **Performance Tuning**: Optimize JPA settings for cloud database latency and throughput
    
    **Implementation Steps:**
    1. Update persistence.xml with Azure database connection properties
    2. Configure HikariCP for optimal cloud performance
    3. Set up environment-specific configurations using Spring profiles or system properties
    4. Add monitoring and logging for database performance
  links:
  - title: "JPA configuration for Azure SQL"
    url: "https://learn.microsoft.com/en-us/azure/developer/java/spring-framework/configure-spring-data-jpa-with-azure-sql-server"
  - title: "Hibernate performance tuning"
    url: "https://hibernate.org/orm/documentation/6.0/"
  - title: "HikariCP configuration guide"
    url: "https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing"
  ruleID: openliberty-database-00006
  when:
    builtin.xml:
      filepaths:
      - persistence.xml
      namespaces: {}
      xpath: //persistence-unit/jta-data-source[contains(text(), 'jdbc/')] | //persistence-unit/non-jta-data-source[contains(text(), 'jdbc/')]
