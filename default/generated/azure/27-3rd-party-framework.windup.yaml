- category: potential
  customVariables: []
  description: Embedded library - Logstash
  effort: 3
  labels:
  - konveyor.io/target=cloud-readiness
  - konveyor.io/source
  links:
  - title: Ensure console logging and configure diagnostic settings
    url: https://learn.microsoft.com/en-us/azure/developer/java/migration/migrate-spring-boot-to-azure-container-apps#ensure-console-logging-and-configure-diagnostic-settings
  - title: Azure Event Hub
    url: https://learn.microsoft.com/azure/event-hubs/event-hubs-about
  - title: Logstash EventHub plugin
    url: https://github.com/logstash-plugins/logstash-input-azure_event_hubs
  message: |-
    The application embeds the Logstash framework. To migrate a Java application that uses LogStash/ELK Stack for log aggregation to Azure, you can follow this recommendation:

     * Ensure your logging output is routed to the console and not to files.

     * Configure the diagnostic setting to stream the console output to an Azure Event Hub.

     * Use the LogStash EventHub plugin to ingest logged events into LogStash.
  ruleID: 3rd-party-framework-00000
  when:
    or:
    - java.dependency:
        lowerbound: 0.0.0
        nameregex: ([a-zA-Z0-9._-]*)logstash([a-zA-Z0-9._-]*)
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)logstash([a-zA-Z0-9._-]*)\.jar$
- category: potential
  customVariables: []
  description: Embedded library - Splunk
  effort: 3
  labels:
  - konveyor.io/target=cloud-readiness
  - konveyor.io/source
  links:
  - title: Ensure console logging and configure diagnostic settings
    url: https://learn.microsoft.com/en-us/azure/developer/java/migration/migrate-spring-boot-to-azure-container-apps#ensure-console-logging-and-configure-diagnostic-settings
  - title: Azure Blob Storage
    url: https://learn.microsoft.com/azure/storage/blobs/
  - title: Splunk Add-on for Microsoft Cloud Services
    url: https://splunkbase.splunk.com/app/3757
  message: |-
    The application embeds the Splunk framework. To migrate a Java application that uses Splunk for log aggregation to Azure, you can follow this recommendation:

     * Ensure your logging output is routed to the console and not to files.

     * Configure the diagnostic setting to stream the console output to Azure Blob Storage.

     * Use the Splunk Add-on for Microsoft Cloud Services to ingest logged events into Splunk.
  ruleID: 3rd-party-framework-01000
  when:
    or:
    - java.dependency:
        lowerbound: 0.0.0
        nameregex: ([a-zA-Z0-9._-]*)splunk([a-zA-Z0-9._-]*)
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)splunk([a-zA-Z0-9._-]*)\.jar$
- category: potential
  customVariables: []
  description: Embedded framework - Feign
  effort: 1
  labels:
  - konveyor.io/target=cloud-readiness
  - konveyor.io/source
  links:
  - title: Migrate clients bypassing the service registry
    url: https://learn.microsoft.com/en-us/azure/developer/java/migration/migrate-spring-cloud-to-azure-container-apps
  - title: Spring Cloud OpenFeign
    url: https://spring.io/projects/spring-cloud-openfeign/
  message: |-
    The application embeds the Feign framework. If you are migrating to Azure Container Apps, it is recommended to use Spring Cloud OpenFeign instead (Spring Cloud Feign has been deprecated).

     When migrating to Azure Container Apps, you can provision the managed Eureka Server. Spring Cloud OpenFeign will easily discover the service registry and invoke the services.
  ruleID: 3rd-party-framework-02000
  when:
    or:
    - java.dependency:
        lowerbound: 0.0.0
        nameregex: com\.netflix\.feign\.([a-zA-Z0-9._-]*)
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.cloud.spring-cloud-starter-feign
    - builtin.file:
        pattern: ^feign-([a-zA-Z0-9._-]*)\.jar$
- category: potential
  customVariables: []
  description: Embedded framework - Zipkin
  effort: 1
  labels:
  - konveyor.io/target=cloud-readiness
  - konveyor.io/source
  links:
  - title: Azure Monitor
    url: https://learn.microsoft.com/azure/azure-monitor/
  - title: Observability in Azure Container Apps
    url: https://learn.microsoft.com/en-us/azure/container-apps/observability
  - title: Distributed Tracing
    url: https://learn.microsoft.com/azure/azure-monitor/app/distributed-trace-data
  message: |-
    The application embeds the Zipkin framework. To migrate a Java application that uses Zipkin to Azure, it is recommended to use Azure Monitor instead.

     * **Identify Zipkin dependencies**: Identify the Zipkin dependencies in your application.

     * **Replace with Azure Monitor**: Azure Monitor provides distributed tracing capabilities. Azure services such as Azure Container Apps, Azure Kubernetes Service, Azure App Service support auto-instrumentation for Azure Monitor.
  ruleID: 3rd-party-framework-03000
  when:
    or:
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.boot.spring-cloud-starter-zipkin
    - java.dependency:
        lowerbound: 0.0.0
        nameregex: io\.zipkin([a-zA-Z0-9._-]*)
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)zipkin([a-zA-Z0-9._-]*)\.jar$
- category: potential
  customVariables: []
  description: Embedded framework - Eureka Client
  effort: 1
  labels:
  - konveyor.io/target=cloud-readiness
  - konveyor.io/source
  links:
  - title: Connect to a managed Eureka Server for Spring in Azure Container Apps
    url: https://learn.microsoft.com/en-us/azure/container-apps/java-eureka-server?tabs=azure-cli
  - title: Create a highly available Eureka server component cluster in Azure Container Apps
    url: https://learn.microsoft.com/en-us/azure/container-apps/java-eureka-server-highly-available
  - title: Integrate Admin for Spring with Eureka Server for Spring in Azure Container Apps
    url: https://learn.microsoft.com/en-us/azure/container-apps/java-admin-eureka-integration
  - title: Remove restricted configurations
    url: https://learn.microsoft.com/en-us/azure/developer/java/migration/migrate-spring-cloud-to-azure-container-apps#remove-restricted-configurations
  message: |-
    The application embeds the Eureka client. If you are migrating to Azure Container Apps, the connection info of Eureka can be injected upon app start.

     Find any explicit configurations of config server connection info:

     If configured in **configuration files**: they will be ignored and overrided by Azure Container Apps.

     If configured in **command line parameters**, **Java system attribute**, **environment variable**: they need to be removed or you might experience conflicts and unexpected behavior.
  ruleID: 3rd-party-framework-04000
  when:
    or:
    - java.dependency:
        lowerbound: 0.0.0
        nameregex: ([a-zA-Z0-9._-]*)eureka-client([a-zA-Z0-9._-]*)
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)eureka-client([a-zA-Z0-9._-]*)\.jar$
- category: potential
  customVariables: []
  description: Embedded framework - Eureka Server
  effort: 1
  labels:
  - konveyor.io/target=cloud-readiness
  - konveyor.io/source
  links:
  - title: Connect to a managed Eureka Server for Spring in Azure Container Apps
    url: https://learn.microsoft.com/en-us/azure/container-apps/java-eureka-server?tabs=azure-cli
  - title: Create a highly available Eureka server component cluster in Azure Container Apps
    url: https://learn.microsoft.com/en-us/azure/container-apps/java-eureka-server-highly-available
  - title: Integrate Admin for Spring with Eureka Server for Spring in Azure Container Apps
    url: https://learn.microsoft.com/en-us/azure/container-apps/java-admin-eureka-integration
  - title: Remove restricted configurations
    url: https://learn.microsoft.com/en-us/azure/developer/java/migration/migrate-spring-cloud-to-azure-container-apps#remove-restricted-configurations
  message: The application embeds the Eureka server. If you are migrating to Azure
    Container Apps, the managed Eureka Server can be used. The managed Eureka Server is a fully managed service that can
    be hosted for you.
  ruleID: 3rd-party-framework-05000
  when:
    or:
    - java.dependency:
        lowerbound: 0.0.0
        nameregex: ([a-zA-Z0-9._-]*)eureka-server([a-zA-Z0-9._-]*)
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)eureka-server([a-zA-Z0-9._-]*)\.jar$