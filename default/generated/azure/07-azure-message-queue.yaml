# Copyright (c) Microsoft Corporation.   

# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#     http://www.apache.org/licenses/LICENSE-2.0  

# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 

# See the License for the specific language governing permissions and 
# limitations under the License. 
- category: optional
  customVariables: []
  description: Kafka connection string, username or password found in configuration
    file
  effort: 5
  labels:
  - target=azure-appservice
  - target=azure-aks
  - target=azure-container-apps
  - source
  - domain=cloud-readiness
  - category=messaging-service-migration
  - message-queue
  - kafka
  - os=windows
  - os=linux
  links:
  - title: Spring Boot app to Kafka on Confluent Cloud
    url: https://learn.microsoft.com/azure/service-connector/tutorial-java-spring-confluent-kafka
  - title: Apache Kafka on Confluent Cloud - Azure Native ISV Service Documentation
    url: https://learn.microsoft.com/azure/partner-solutions/apache-kafka-confluent-cloud
  - title: Passwordless connections for Azure services
    url: https://learn.microsoft.com/azure/developer/intro/passwordless-overview
  message: "The application uses a Kafka connection string or password. To migrate
    a Java application that uses a Kafka connection string to Azure, you can follow
    these recommendations:\n\n * **Provision an Apache Kafka for Confluent Cloud**:
    Consider moving to Apache Kafka for Confluent Cloud to reduce the burden of cross-platform
    management. Microsoft partnered with Confluent Cloud to build an integrated provisioning
    layer from Azure to Confluent Cloud. You can easily integrate and manage Confluent
    Cloud with your Azure applications.\n\n * **Connect to Apache Kafka for Confluent
    Cloud using Service Connector**: Create service connection using **Service Connector**
    to connect your Apache Kafka on Confluent Cloud to your azure app. Instead of
    manually configuring connection string in your applications, you can automatically
    connect Apache Kafka for Confluent Cloud using Service Connector. \n\n * **Passwordless
    connections for Azure services**: Consider using passwordless connections for
    Azure services. You can provide an additional layer of security and convenience
    for accessing resources in Azure by eliminating the need for passwords. This way
    you can reduce the risk of password-related vulnerabilities, such as weak passwords
    or password theft."
  ruleID: azure-message-queue-config-kafka-01000
  when:
    or:
    - java.dependency:
        lowerbound: 0.0.0
        nameregex: ([a-zA-Z0-9._-]*)kafka([a-zA-Z0-9._-]*)
    - builtin.filecontent:
        filePattern: (/|\\)(application|bootstrap)(-[a-zA-Z0-9]+)*?\.(properties|yaml|yml)$
        pattern: (?i)(?:\.kafka\.|bootstrap\.servers|bootstrap:\s*servers)
- category: optional
  customVariables: []
  description: RabbitMQ connection string, username or password found in configuration
    file
  effort: 5
  labels:
  - target=azure-appservice
  - target=azure-aks
  - target=azure-container-apps
  - source
  - domain=cloud-readiness
  - category=messaging-service-migration
  - message-queue
  - RabbitMQ Client
  - os=windows
  - os=linux
  links:
  - title: Azure Service Bus documentation
    url: https://learn.microsoft.com/azure/service-bus-messaging
  - title: Service connection in Azure Container Apps
    url: https://learn.microsoft.com/azure/service-connector/quickstart-portal-container-apps
  - title: Passwordless connections for Azure services
    url: https://learn.microsoft.com/azure/developer/intro/passwordless-overview
  message: "The application uses a RabbitMQ connection string, username, or password.
    To migrate a Java application that uses a RabbitMQ connection string to Azure,
    you can follow these recommendations:\n\n * Provision **Azure Service Bus**: Replace
    RabbitMQ with Azure Service Bus, a fully managed messaging service that offers
    reliable message queuing and publish/subscribe capabilities.\n\n * **Connect to
    Azure Service Bus using Service Connector**: Create service connection using **Service
    Connector** to connect your Azure Service Bus to your azure app. Instead of manually
    configuring connection string in your applications, you can automatically connect
    Azure Service Bus using Service Connector.\n \n * **Passwordless connections for
    Azure services**: Consider using passwordless connections for Azure services.
    You can provide an additional layer of security and convenience for accessing
    resources in Azure by eliminating the need for passwords. This way you can reduce
    the risk of password-related vulnerabilities, such as weak passwords or password
    theft."
  ruleID: azure-m-config-rabbitmq-01000
  when:
    builtin.filecontent:
      filePattern: (/|\\)(application|bootstrap)(-[a-zA-Z0-9]+)*?\.(properties|yaml|yml)$
      pattern: rabbitmq\.(.*\.)?(addresses|host|virtual-host|username|password)
- category: optional
  customVariables: []
  description: ActiveMQ Artemis connection string, username or password found in configuration
    file
  effort: 5
  labels:
  - target=azure-appservice
  - target=azure-aks
  - target=azure-container-apps
  - source
  - domain=cloud-readiness
  - category=messaging-service-migration
  - message-queue
  - ActiveMQ
  - os=windows
  - os=linux
  links:
  - title: Azure Service Bus documentation
    url: https://learn.microsoft.com/azure/service-bus-messaging
  - title: Migrate existing Java Message Service applications from Apache ActiveMQ
      to Azure Service Bus
    url: https://learn.microsoft.com/azure/service-bus-messaging/migrate-jms-activemq-to-servicebus
  - title: Service connection in Azure Container Apps
    url: https://learn.microsoft.com/azure/service-connector/quickstart-portal-container-apps
  - title: Passwordless connections for Azure services
    url: https://learn.microsoft.com/azure/developer/intro/passwordless-overview
  message: |-
    The application uses an ActiveMQ Artemis connection string, username, or password. To migrate a Java application that uses an ActiveMQ Artemis connection string to Azure, you can follow these recommendations:

     * Provision **Azure Service Bus**: Replace ActiveMQ with Azure Service Bus, a fully managed messaging service that offers reliable message queuing and publish/subscribe capabilities.

     * **Connect to Azure Service Bus using Service Connector**: Create service connection using **Service Connector** to connect your Azure Service Bus to your azure app. Instead of manually configuring connection string in your applications, you can automatically connect Azure Service Bus using Service Connector.

     * **Passwordless connections for Azure services**: Consider using passwordless connections for Azure services. You can provide an additional layer of security and convenience for accessing resources in Azure by eliminating the need for passwords. This way you can reduce the risk of password-related vulnerabilities, such as weak passwords or password theft.
  ruleID: azure-message-queue-config-artemis-01000
  when:
    builtin.filecontent:
      filePattern: (/|\\)(application|bootstrap)(-[a-zA-Z0-9]+)*?\.(properties|yaml|yml)$
      pattern: artemis\.(broker-url|user|password)
- category: optional
  customVariables: []
  description: Spring RabbitMQ usage found in code
  effort: 5
  labels:
  - target=azure-appservice
  - target=azure-aks
  - target=azure-container-apps
  - source
  - domain=cloud-readiness
  - category=messaging-service-migration
  - message-queue
  - RabbitMQ Client
  - os=windows
  - os=linux
  links:
  - title: Azure Service Bus documentation
    url: https://learn.microsoft.com/azure/service-bus-messaging
  - title: Use Azure Service Bus in Spring applications
    url: https://learn.microsoft.com/azure/developer/java/spring-framework/using-service-bus-in-spring-applications
  message: |-
    The application uses Spring RabbitMQ based on Spring AMQP in code. To migrate a Java application that uses Spring RabbitMQ to Azure, you can follow these recommendations:

     * Provision **Azure Service Bus**: Replace RabbitMQ with Azure Service Bus, a fully managed messaging service that offers reliable message queuing and publish/subscribe capabilities.

     * Update the application's **messaging connection** details: Modify the Java application's configuration updating the connection information and message queues/topics.

     * Configure Azure Service Bus **queues/topics**: Create appropriate queues or topics in Azure Service Bus to align with your application's messaging requirements. Configure access control and security settings as needed.
  ruleID: azure-message-queue-rabbitmq-01000
  when:
    java.referenced:
      location: PACKAGE
      pattern: org.springframework.amqp.rabbit*
- category: optional
  customVariables: []
  description: Spring AMQP dependency found
  effort: 5
  labels:
  - target=azure-appservice
  - target=azure-aks
  - target=azure-container-apps
  - source
  - domain=cloud-readiness
  - category=messaging-service-migration
  - message-queue
  - AMQP Client
  - os=windows
  - os=linux
  links:
  - title: Azure Service Bus documentation
    url: https://learn.microsoft.com/azure/service-bus-messaging
  - title: Use Azure Service Bus in Spring applications
    url: https://learn.microsoft.com/azure/developer/java/spring-framework/using-service-bus-in-spring-applications
  message: |-
    The application uses Spring AMQP dependency. To migrate a Java application that uses Spring AMQP to Azure, you can follow these recommendations:

     * Provision **Azure Service Bus**: Use Azure Service Bus, a fully managed messaging service that offers reliable message queuing and publish/subscribe capabilities.

     * Update the application's **messaging connection** details: Modify the Java application's configuration updating the connection information and message queues/topics.

     * Configure Azure Service Bus **queues/topics**: Create appropriate queues or topics in Azure Service Bus to align with your application's messaging requirements. Configure access control and security settings as needed.
  ruleID: azure-message-queue-amqp-02000
  when:
    or:
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.boot.spring-boot-starter-amqp
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.amqp.spring-rabbit
    - builtin.filecontent:
        filePattern: (/|\\)build\.gradle$
        pattern: spring-boot-starter-amqp
    - builtin.filecontent:
        filePattern: (/|\\)([a-zA-Z0-9._-]+)\.(xml|properties|yaml|yml)$
        pattern: .*amqp.*
- category: optional
  customVariables: []
  description: Spring JMS RabbitMQ dependency found
  effort: 5
  labels:
  - target=azure-appservice
  - target=azure-aks
  - target=azure-container-apps
  - source
  - domain=cloud-readiness
  - category=messaging-service-migration
  - message-queue
  - RabbitMQ Client
  - os=windows
  - os=linux
  links:
  - title: Use JMS in Spring to access Azure Service Bus
    url: https://learn.microsoft.com/azure/developer/java/spring-framework/configure-spring-boot-starter-java-app-with-azure-service-bus
  - title: Use Azure Service Bus with JMS
    url: https://learn.microsoft.com/azure/developer/java/spring-framework/spring-jms-support
  - title: Azure Service Bus documentation
    url: https://learn.microsoft.com/azure/service-bus-messaging
  - title: Use Azure Service Bus in Spring applications
    url: https://learn.microsoft.com/azure/developer/java/spring-framework/using-service-bus-in-spring-applications
  message: |-
    The application uses Spring JMS RabbitMQ dependency. It is recommended to migrate to Azure Service Bus with Spring JMS

     * Replace RabbitMQ dependencies with Azure Service Bus dependencies: Remove RabbitMQ dependencies and add Azure Service Bus dependencies: com.azure.spring spring-cloud-azure-dependencies, com.azure.spring spring-cloud-azure-starter-servicebus-jms.
     * Replace RabbitMQ connection details with Azure Service Bus connection details: Modify the Java application's configuration updating the connection information and message queues/topics.
  ruleID: azure-message-queue-spring-jms-rabbitmq-01000
  when:
    and:
    - java.dependency:
        lowerbound: 0.0.0
        nameregex: org\.springframework.*jms
    - java.dependency:
        lowerbound: 0.0.0
        nameregex: com\.rabbitmq.*\.rabbitmq-jms
- category: potential
  customVariables: []
  description: ActiveMQ found
  effort: 3
  labels:
  - target=azure-appservice
  - target=azure-aks
  - target=azure-container-apps
  - source
  - domain=cloud-readiness
  - category=messaging-service-migration
  - message-queue
  - ActiveMQ
  - os=windows
  - os=linux
  links:
  - title: Spring Boot application using an Active MQ Broker
    url: https://learn.microsoft.com/en-us/azure/developer/java/migration/migrate-spring-boot-to-azure-container-apps#jms-message-brokers
  - title: Azure Service Bus documentation
    url: https://learn.microsoft.com/azure/service-bus-messaging
  - title: Migrate existing Java Message Service applications from Apache ActiveMQ
      to Azure Service Bus
    url: https://learn.microsoft.com/azure/service-bus-messaging/migrate-jms-activemq-to-servicebus
  - title: Azure Monitor documentation
    url: https://learn.microsoft.com/azure/azure-monitor
  - title: Passwordless connections for Azure services
    url: https://learn.microsoft.com/azure/developer/intro/passwordless-overview
  - title: Microsoft Defender for Cloud
    url: https://learn.microsoft.com/azure/defender-for-cloud
  - title: How to use the Spring Boot Starter for Azure Service Bus JMS
    url: https://docs.microsoft.com/azure/developer/java/spring-framework/configure-spring-boot-starter-java-app-with-azure-service-bus
  - title: Azure Spring Boot Starter for Azure Service Bus JMS
    url: https://search.maven.org/artifact/com.azure.spring/azure-spring-boot-starter-servicebus-jms
  message: |-
    To migrate a Java application that uses ActiveMQ to Azure, you can follow these recommendations:

     * Provision **Azure Service Bus**: Replace ActiveMQ with Azure Service Bus, a fully managed messaging service that offers reliable message queuing and publish/subscribe capabilities.

     * Update the application's **messaging connection** details: Modify the Java application's configuration updating the connection information and message queues/topics.

     * Configure Azure Service Bus **queues/topics**: Create appropriate queues or topics in Azure Service Bus to align with your application's messaging requirements. Configure access control and security settings as needed.

     * Handle **message persistence**: ActiveMQ often relies on disk storage for message persistence. Azure Service Bus offers built-in message persistence, ensuring reliable message delivery. Ensure your application's messaging code handles message persistence appropriately.

     * Enable **monitoring and diagnostics**: Utilize Azure Monitor and Microsoft Defender for Cloud to monitor and detect any potential security threats or anomalies in your Azure Service Bus environment. Enable diagnostics logging and set up alerts for suspicious activities.

     * Apply **security** measures: Implement Azure Active Directory (Azure AD) authentication and authorization for accessing Azure Service Bus resources. Enable TLS encryption for communication between your Java application and Azure Service Bus. Enable passwordless connections for Azure services to improve security and reduce the risk of credential theft.
  ruleID: azure-message-queue-activemq-01000
  when:
    or:
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.boot.spring-boot-starter-activemq
    - java.dependency:
        lowerbound: 0.0.0
        nameregex: org\.apache\.activemq\.([a-zA-Z0-9._-]*)
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)activemq([a-zA-Z0-9._-]*)$
- category: optional
  customVariables: []
  description: Java EE or Jakarta EE application using RabbitMQ AMQP found
  effort: 7
  labels:
  - target=azure-appservice
  - target=azure-aks
  - target=azure-container-apps
  - source
  - domain=cloud-readiness
  - category=messaging-service-migration
  - message-queue
  - RabbitMQ Client
  - JavaEE
  - JakartaEE
  - os=windows
  - os=linux
  links:
  - title: Azure Service Bus documentation
    url: https://learn.microsoft.com/azure/service-bus-messaging
  message: |-
    The application is a Java EE or Jakarta EE project using RabbitMQ AMQP for messaging. To migrate this application to Azure, you can follow these recommendations:

     * **Provision Azure Service Bus**: Replace RabbitMQ with Azure Service Bus, a fully managed messaging service that offers reliable message queuing and publish/subscribe capabilities with JMS 2.0 support.

     * **Update messaging dependencies**: Replace RabbitMQ AMQP client dependencies with Azure Service Bus JMS libraries. For Jakarta EE applications, ensure you use the appropriate Jakarta namespace dependencies.

     * **Migrate JMS configuration**: Update your application's JMS configuration to connect to Azure Service Bus instead of RabbitMQ. This includes updating connection factories, destination configurations, and any JNDI lookups.

     * **Handle namespace migration**: If migrating from Java EE to Jakarta EE on Azure, ensure all javax.* namespace references are updated to jakarta.* namespace, including JMS-related imports.

     * **Configure Azure Service Bus queues/topics**: Create appropriate queues or topics in Azure Service Bus to align with your application's messaging requirements. Configure access control and security settings as needed.

     * **Connect using Service Connector**: Create service connections using **Service Connector** to connect your Azure Service Bus to your Azure app. This automates connection configuration and reduces manual setup.

     * **Passwordless connections**: Consider using passwordless connections for Azure services to provide an additional layer of security and convenience by eliminating the need for passwords.
  ruleID: azure-message-queue-java-ee-rabbitmq-amqp-01000
  when:
    and:
    - or:
      - java.dependency:
          lowerbound: 0.0.0
          nameregex: .*:javaee-api
      - java.dependency:
          lowerbound: 0.0.0
          nameregex: .*:jakarta\.jakartaee-api
    - or:
      - java.dependency:
          lowerbound: 0.0.0
          nameregex: com\.rabbitmq\.amqp-client.*
      - builtin.filecontent:
          filePattern: (/|\\)(application|bootstrap|web)(-[a-zA-Z0-9]+)*?\.(properties|xml|yaml|yml)$
          pattern: rabbitmq\.(.*\.)?(addresses|host|virtual-host|username|password)
      - java.referenced:
          location: PACKAGE
          pattern: com.rabbitmq.client*
