- category: potential
  customVariables: []
  description: Embedded library - Spring Cloud Vault
  effort: 1
  labels:
  - konveyor.io/target=azure-spring-apps
  - konveyor.io/target=azure-appservice
  - konveyor.io/target=azure-aks
  - konveyor.io/target=azure-container-apps
  - konveyor.io/source
  - domain=azure-readiness
  - category=credential-migration
  - vault
  links:
  - title: Load a secret from Azure Key Vault in a Spring Boot application
    url: https://learn.microsoft.com/azure/developer/java/spring-framework/configure-spring-boot-starter-java-app-with-azure-key-vault
  - title: Azure Key Vault
    url: https://learn.microsoft.com/azure/key-vault/general/overview
  message: |-
    The application embeds Spring Cloud Vault.
     To migrate a Java application that uses Spring Cloud Vault to store and access secrets to Azure, you can follow this recommendation:

     * Identify the backing secret store (for example, HashiCorp Vault or CredHub).

     * Identify all the secrets used by the application code.

     * Migrate Spring Cloud Vault secrets to Azure KeyVault. You can inject secrets directly into applications through Spring by using the Azure KeyVault Spring Boot Starter.

     * Note that Migration may require you to rename some secrets. Update your application code accordingly.
  ruleID: spring-boot-to-azure-key-vault-01000
  when:
    or:
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.cloud.spring-cloud-starter-vault-config
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.cloud.spring-cloud-vault-config
    - java.dependency:
        lowerbound: 0.0.0
        name: org.springframework.cloud.spring-cloud-vault-config
    - builtin.filecontent:
        filePattern: (/|\\)([a-zA-Z0-9._-]+)\.{extensions}$
        pattern: spring.cloud.vault
    - builtin.file:
        pattern: ^([a-zA-Z0-9._-]*)spring-cloud-vault([a-zA-Z0-9._-]*)\.jar$
