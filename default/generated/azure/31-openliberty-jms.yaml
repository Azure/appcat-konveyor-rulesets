- category: mandatory
  description: Detect OpenLiberty JMS ConnectionFactory configurations
  effort: 4
  labels:
  - konveyor.io/source=java-ee
  - konveyor.io/target=aks
  message: |
    Detected OpenLiberty JMS ConnectionFactory configurations that need to be migrated to Azure messaging services.
    
    **Migration options:**
    - Use Azure Service Bus as a managed JMS alternative
    - For simple messaging needs, consider Azure Queue Storage
    - For publish-subscribe scenarios, use Azure Event Grid or Event Hubs
    
    **Implementation steps:**
    1. Add the appropriate Azure messaging SDK to your project
    2. Replace JMS ConnectionFactory with the appropriate Azure client
    3. Update connection strings and store credentials in Kubernetes Secrets or Azure Key Vault
    
    Example Azure Service Bus configuration in application.properties:
    ```
    spring.jms.servicebus.connection-string=${AZURE_SERVICEBUS_CONNECTION_STRING}
    spring.jms.servicebus.pricing-tier=standard
    ```
  ruleID: aks-liberty-jms-connectionfactory-00050
  when:
    builtin.xml:
      filepaths:
      - server.xml
      namespaces: {}
      xpath: //server/jmsConnectionFactory | //server/jmsQueueConnectionFactory | //server/jmsTopicConnectionFactory | //server/jmsQueue | //server/jmsTopic | //server/jmsActivationSpec

- category: mandatory
  description: Detect JMS Resource injection in application code
  effort: 4
  labels:
  - konveyor.io/source=java-ee
  - konveyor.io/target=aks
  message: |
    Detected JMS resource injections that need to be updated for Azure Service Bus.
    
    **Required changes:**
    - Replace JMS ConnectionFactory and Queue/Topic injections with Azure Service Bus clients
    - Update message sending and receiving logic to use Azure SDK
    
    Example Azure Service Bus implementation:
    ```java
    // Before: JMS injection
    @Resource(lookup = "java:/jms/queue/MyQueue")
    private Queue queue;
    
    @Resource(lookup = "java:/ConnectionFactory")
    private ConnectionFactory connectionFactory;
    
    // After: Azure Service Bus
    private ServiceBusClient serviceBusClient;
    private ServiceBusSenderClient sender;
    
    @PostConstruct
    public void init() {
        serviceBusClient = new ServiceBusClientBuilder()
            .connectionString(connectionString)
            .buildClient();
        sender = serviceBusClient.createSender("myqueue");
    }
    ```
  ruleID: aks-jms-resource-injection-00052
  when:
    or:
    - java.referenced:
        location: ANNOTATION
        pattern: javax.annotation.Resource
        annotated:
          elements:
            - name: name
              value: jms/[a-zA-Z0-9_-]+
    - java.referenced:
        location: ANNOTATION
        pattern: javax.annotation.Resource
        annotated:
          elements:
            - name: lookup
              value: jms/[a-zA-Z0-9_-]+

- category: mandatory
  description: Detect Message-Driven Bean implementations
  effort: 5
  labels:
  - konveyor.io/source=java-ee
  - konveyor.io/target=aks
  message: |
    Detected Message-Driven Beans (MDBs) that need to be migrated to Azure Service Bus message processing.
    
    **Migration options:**
    - Use Azure Service Bus SDK with message processors
    - Consider Azure Functions with Service Bus triggers for serverless processing
    - For Kubernetes deployments, implement Service Bus processor in your application pods
    
    **Example Azure Service Bus message processor implementation:**
    ```java
    // Before: JMS MDB
    @MessageDriven(
        activationConfig = {
            @ActivationConfigProperty(propertyName = "destinationLookup", propertyValue = "java:/jms/queue/MyQueue"),
            @ActivationConfigProperty(propertyName = "destinationType", propertyValue = "javax.jms.Queue")
        }
    )
    public class MessageReceiver implements MessageListener {
        @Override
        public void onMessage(Message message) {
            // Process message
        }
    }
    
    // After: Azure Service Bus processor
    public class ServiceBusMessageProcessor {
        private ServiceBusProcessorClient processorClient;
        
        public void startMessageProcessing() {
            processorClient = new ServiceBusClientBuilder()
                .connectionString(connectionString)
                .processor()
                .queueName("myqueue")
                .processMessage(this::processMessage)
                .processError(this::processError)
                .buildProcessorClient();
            
            processorClient.start();
        }
        
        private void processMessage(ServiceBusReceivedMessageContext context) {
            // Process message
        }
        
        private void processError(ServiceBusErrorContext context) {
            // Handle error
        }
    }
    ```
  ruleID: aks-jms-mdb-00053
  when:
    java.referenced:
      location: ANNOTATION
      pattern: javax.ejb.MessageDriven

- category: mandatory
  description: Detect JMS resource references in web.xml/ejb-jar.xml
  effort: 3
  labels:
  - konveyor.io/source=java-ee
  - konveyor.io/target=aks
  message: |
    Detected JMS resource references in deployment descriptors that need to be updated for Azure Service Bus.
    
    **Required changes:**
    - Remove JMS resource references from deployment descriptors
    - Add Azure Service Bus connection configuration to application properties
    - Update application code to use Azure Service Bus SDK instead of JMS
    
    **Example application.properties configuration:**
    ```properties
    azure.servicebus.connection-string=${SERVICEBUS_CONNECTION_STRING}
    azure.servicebus.namespace=${SERVICEBUS_NAMESPACE}
    ```
  ruleID: aks-jms-resource-ref-00054
  when:
    builtin.xml:
      filepaths:
      - web.xml
      - ejb-jar.xml
      namespaces:
        jee: http://xmlns.jcp.org/xml/ns/javaee
        j2ee: http://java.sun.com/xml/ns/j2ee
      xpath: //jee:resource-ref/jee:res-type[contains(text(), 'javax.jms')] | //jee:message-driven-destination | //j2ee:resource-ref/j2ee:res-type[contains(text(), 'javax.jms')] | //j2ee:message-driven-destination

# - category: mandatory
#   description: Detect JMS JNDI lookups in code
#   effort: 4
#   labels:
#   - konveyor.io/source=java-ee
#   - konveyor.io/target=aks
#   message: |
#     Detected manual JNDI lookups for JMS resources that need to be updated for Azure messaging services.
    
#     **Required changes:**
#     - Remove JNDI lookups for JMS resources
#     - Replace with direct Azure Service Bus client initialization
#     - Update message sending and receiving logic
    
#     **Example replacement:**
#     ```java
#     // Before: JNDI lookup for JMS resources
#     Context ctx = new InitialContext();
#     ConnectionFactory factory = (ConnectionFactory) ctx.lookup("java:comp/env/jms/ConnectionFactory");
#     Queue queue = (Queue) ctx.lookup("java:comp/env/jms/MyQueue");
    
#     // After: Azure Service Bus direct initialization
#     ServiceBusClientBuilder builder = new ServiceBusClientBuilder()
#         .connectionString(connectionString);
        
#     ServiceBusSenderClient sender = builder.sender()
#         .queueName("myqueue")
#         .buildClient();
#     ```
#   ruleID: aks-jms-jndi-lookup-00055
#   when:
#     builtin.filecontent:
#       pattern: "(?:ctx|context|initialContext)\\s*\\.\\s*lookup\\s*\\(\\s*[\"'](?:java:comp/env/)?jms/[^\"']+[\"']\\s*\\)"

- category: mandatory
  description: Detect JMS API usage in code
  effort: 4
  labels:
  - konveyor.io/source=java-ee
  - konveyor.io/target=aks
  message: |
    Detected JMS API usage that needs to be updated for Azure messaging services.
    
    **Required changes:**
    - Replace JMS API classes (ConnectionFactory, Connection, Session, etc.) with Azure SDK
    - Update message creation and sending patterns
    - Update message receiving and processing logic
    
    **Migration guide:**
    - For point-to-point messaging: Use Azure Service Bus queues
    - For publish-subscribe: Use Azure Service Bus topics or Event Grid
    - For high-throughput event streaming: Consider Azure Event Hubs
    
    **Example Azure Service Bus dependency:**
    ```xml
    <dependency>
      <groupId>com.azure</groupId>
      <artifactId>azure-messaging-servicebus</artifactId>
      <version>7.13.1</version>
    </dependency>
    ```
  ruleID: aks-jms-api-usage-00056
  when:
    java.referenced:
      location: PACKAGE
      pattern: javax.jms*
